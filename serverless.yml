---
service: serverless-backend
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: serverless-admin
  region: ap-southeast-1
  # memorySize: 256
  # timeout: 6
  # vpc:
  #   securityGroupIds:
  #     - sg-2ebd8567
  #   subnetIds:
  #     - subnet-626db92a
  #     - subnet-1bd04242
  environment:
    DYNAMODB_TABLE: testTable
  # DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        #   - dynamodb:*
        #   - s3:*
        #   - ses:*
        # Resource: '*'
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
# plugins:
#   # - serverless-webpack
#   - serverless-offline
#   - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations

functions:

# AUTHEN PAGE
  addUser:
    handler: authenPage/addUser.addUser
    events:
      - http:
          path: authenPage/addUser
          method: post
          cors: true
    # role: arn:aws:iam::790522487667:role/userDB

# ONBOARDING PAGE
  getProfileIcon:
    handler: onboardingPage/personalInfo.getProfileIcon
    events:
      - http:
          path: onboardingPage/profileIcon
          method: get
          cors: true

  createPersonalInfo:
    handler: onboardingPage/personalInfo.createPersonalInfo
    events:
      - http:
          path: onboardingPage/personalInfo
          method: post
          cors: true

  getMenuCuisine:
    handler: onboardingPage/cuisineOfMenu.getMenuCuisine
    events:
      - http:
          path: onboardingPage/cuisineOfMenu
          method: get
          cors: true

  postMenuCuisine:
    handler: onboardingPage/cuisineOfMenu.postMenuCuisine
    events:
      - http:
          path: onboardingPage/cuisineOfMenu
          method: post
          cors: true

  getMenuTaste:
    handler: onboardingPage/tasteOfMenu.getMenuTaste
    events:
      - http:
          path: onboardingPage/tasteOfMenu
          method: get
          cors: true

  postMenuTaste:
    handler: onboardingPage/tasteOfMenu.postMenuTaste
    events:
      - http:
          path: onboardingPage/tasteOfMenu
          method: post
          cors: true

# HOME PAGE
  getDailyInfo:
    handler: homePage/dailyInfo.getDailyInfo
    events:
      - http:
          path: homePage/dailyInfo/{id}
          method: get
          cors: true
# INGREDIENT PAGE
  getSearchIngredient:
    handler: ingredientsPage/searchIngredient.getSearchIngredient
    events:
      - http:
          path: ingredientsPage/searchIngredient
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{ "ingredient" : "$input.params(''ingredient'')" }'

  getIngredientList:
    handler: ingredientsPage/searchIngredient.getIngredientList
    events:
      - http:
          path: ingredientsPage/ingredientLists/{type}
          method: get
          cors: true

  postYourIngredients:
    handler: ingredientsPage/yourIngredients.postYourIngredients
    events:
      - http:
          path: ingredientsPage/yourIngredients
          method: post
          cors: true
          
  getYourIngredients:
    handler: ingredientsPage/yourIngredients.getYourIngredients
    events:
      - http:
          path: ingredientsPage/yourIngredients/{id}
          method: get
          cors: true
          
# MENU PAGE
  getMenuFilterFor:
    handler: menuPage/menuFilterFor.getMenuFilterFor
    events:
      - http:
          path: menuPage/menuFilterFor/{id}
          method: get
          cors: true

  genMenu:
    handler: menuPage/menuFilter.genMenu
    timeout: 100
    events:
      - http:
          path: menuPage/menuFilter
          method: post
          cors: true

  getMenus:
    handler: menuPage/menus.getMenus
    events:
      - http:
          path: menuPage/menus/{id}/{timestamp}
          method: get
          cors: true          



# WORKOUT PAGE


# SETTING PAGE
  getUserFullInfo:
    handler: settingPage/editProfile.getUserFullInfo
    events:
      - http:
          path: settingPage/userProfile/{id}
          method: get
          cors: true

  getOtherProfiles:
    handler: settingPage/addOtherProfiles.getOtherProfiles
    events:
      - http:
          path: settingPage/getOtherProfiles/{id}
          method: get
          cors: true

  createOrUpdateOthersInfo:
    handler: settingPage/addOtherProfiles.createOrUpdateOthersInfo
    events:
      - http:
          path: settingPage/otherProfile
          method: post
          cors: true
  
  postOthersMenuTaste:
    handler: settingPage/addOtherProfiles.postOthersMenuTaste
    events:
      - http:
          path: settingPage/othersTasteOfMenus
          method: post
          cors: true

  postOthersMenuCuisine:
    handler: settingPage/addOtherProfiles.postOthersMenuCuisine
    events:
      - http:
          path: settingPage/othersCuisineOfMenus
          method: post
          cors: true

  getOthersFullInfo:
    handler: settingPage/addOtherProfiles.getOthersFullInfo
    events:
      - http:
          path: settingPage/othersProfileDetails/{id}/{profileOf}
          method: get
          cors: true          






  hello:
    handler: handler.hello
    events:
      - http:
          path: handlerMap
          method: post
          cors: true

  # create:
  #   handler: todos/create.create
  #   events:
  #     - http:
  #         path: todos
  #         method: post
  #         cors: true

  # list:
  #   handler: todos/list.list
  #   events:
  #     - http:
  #         path: todos
  #         method: get
  #         cors: true

  # get:
  #   handler: todos/get.get
  #   events:
  #     - http:
  #         path: todos/{id}
  #         method: get
  #         cors: true

  # update:
  #   handler: todos/update.update
  #   events:
  #     - http:
  #         path: todos/{id}
  #         method: put
  #         cors: true

  # delete:
  # handler: todos/delete.delete
  # events:
  #   - http:
  #       path: todos/{id}
  #       method: delete
  #       cors: true
# resources:
#   Resources:
#     dynamoDbTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         # TableName: ${self:provider.environment.DYNAMODB_TABLE}
#         TableName: 'testTable'
#         AttributeDefinitions:
#           - AttributeName: "PK"
#             AttributeType: "S"
#           - AttributeName: "SK"
#             AttributeType: "S"
#         KeySchema:
#           - AttributeName: PK
#             KeyType: HASH
#           - AttributeName: SK
#             KeyType: RANGE
#         BillingMode: PAY_PER_REQUEST
